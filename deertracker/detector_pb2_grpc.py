# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from deertracker import detector_pb2 as detector__pb2

import numpy as np
from PIL import Image
import io


class DetectorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.predict = channel.unary_unary(
            "/Detector/predict",
            request_serializer=detector__pb2.Image.SerializeToString,
            response_deserializer=detector__pb2.Prediction.FromString,
        )


class DetectorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self):
        from deertracker.detector import MegaDetector

        self.detector = MegaDetector()

    def predict(self, request, context):
        image = np.array(Image.open(io.BytesIO(request.value)))
        bbox, _class, scores = self.detector.predict(image)
        context.set_code(grpc.StatusCode.OK)
        return detector__pb2.Prediction(
            bbox=[
                detector__pb2.Box(x=b[1], y=b[0], w=b[3] - b[1], h=b[2] - b[0])
                for b in bbox
            ],
            label=[self.detector.labels[_class[c]] for c in _class],
            score=scores,
        )


def add_DetectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "predict": grpc.unary_unary_rpc_method_handler(
            servicer.predict,
            request_deserializer=detector__pb2.Image.FromString,
            response_serializer=detector__pb2.Prediction.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "Detector", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Detector(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def predict(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Detector/predict",
            detector__pb2.Image.SerializeToString,
            detector__pb2.Prediction.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
